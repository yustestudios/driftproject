//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DriftPlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DriftPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bb2fe52-977d-47a2-96bf-32463b7511af"",
            ""actions"": [
                {
                    ""name"": ""HorizontalPS4"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3d90a9e6-a6cb-4bbd-9eeb-9a3d28d7782a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalPS4"",
                    ""type"": ""Value"",
                    ""id"": ""5a263c02-1fb3-4823-999b-81f374398f26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BrakePS4"",
                    ""type"": ""Value"",
                    ""id"": ""f130fd37-c2fe-45a4-8078-8fc8364fac5d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c171b3f-351e-4eb6-83ea-66b01b325923"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalPS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51a00bfc-ea80-4d91-941b-32372e5628ec"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalPS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a868fada-ce8c-453c-8356-e36e7dbf86c1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""VerticalPS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a099219-04f2-4957-a592-97804b1d8f5a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""BrakePS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c6d6a6-05f3-4a06-8981-7e85db1cd13c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalPS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae646581-f642-4c10-8cd3-31e3a70843ac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakePS4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_HorizontalPS4 = m_Player.FindAction("HorizontalPS4", throwIfNotFound: true);
        m_Player_VerticalPS4 = m_Player.FindAction("VerticalPS4", throwIfNotFound: true);
        m_Player_BrakePS4 = m_Player.FindAction("BrakePS4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_HorizontalPS4;
    private readonly InputAction m_Player_VerticalPS4;
    private readonly InputAction m_Player_BrakePS4;
    public struct PlayerActions
    {
        private @DriftPlayer m_Wrapper;
        public PlayerActions(@DriftPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalPS4 => m_Wrapper.m_Player_HorizontalPS4;
        public InputAction @VerticalPS4 => m_Wrapper.m_Player_VerticalPS4;
        public InputAction @BrakePS4 => m_Wrapper.m_Player_BrakePS4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @HorizontalPS4.started += instance.OnHorizontalPS4;
            @HorizontalPS4.performed += instance.OnHorizontalPS4;
            @HorizontalPS4.canceled += instance.OnHorizontalPS4;
            @VerticalPS4.started += instance.OnVerticalPS4;
            @VerticalPS4.performed += instance.OnVerticalPS4;
            @VerticalPS4.canceled += instance.OnVerticalPS4;
            @BrakePS4.started += instance.OnBrakePS4;
            @BrakePS4.performed += instance.OnBrakePS4;
            @BrakePS4.canceled += instance.OnBrakePS4;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @HorizontalPS4.started -= instance.OnHorizontalPS4;
            @HorizontalPS4.performed -= instance.OnHorizontalPS4;
            @HorizontalPS4.canceled -= instance.OnHorizontalPS4;
            @VerticalPS4.started -= instance.OnVerticalPS4;
            @VerticalPS4.performed -= instance.OnVerticalPS4;
            @VerticalPS4.canceled -= instance.OnVerticalPS4;
            @BrakePS4.started -= instance.OnBrakePS4;
            @BrakePS4.performed -= instance.OnBrakePS4;
            @BrakePS4.canceled -= instance.OnBrakePS4;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnHorizontalPS4(InputAction.CallbackContext context);
        void OnVerticalPS4(InputAction.CallbackContext context);
        void OnBrakePS4(InputAction.CallbackContext context);
    }
}
